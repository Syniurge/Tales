/*
 * Copyright 2013 Elie Morisse
 *
 * This file is part of Tales.
 *
 * Tales is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * Tales is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
 * PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License along
 * with Tales.  If not, see <http://www.gnu.org/licenses/>.
 */

// Generated by Bisonc++ V4.03.00 on Sun, 21 Apr 2013 19:32:06 +0200

#ifndef TalesParser_h_included
#define TalesParser_h_included

#include "TalesRTTI.hpp"

// $insert baseclass
#include "TalesParserbase.h"
// $insert scanner.h
#include "TalesLexer.h"

// $insert namespace-open
namespace Tales
{

#undef Parser
class Parser: public ParserBase
{
    // $insert scannerobject
    Scanner d_scanner;
    ASTContext& context;
        
    public:
        int parse();
        Parser(ASTContext& context, std::istream &in = std::cin,
								std::ostream &out = std::cout)
						: context(context), d_scanner(d_val__, in, out) {}

    private:
        void error(char const *msg);    // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc

    // support functions for parse():
        void executeAction(int ruleNr);
        void errorRecovery();
        int lookup(bool recovery);
        void nextToken();
        void print__();
        void exceptionHandler__(std::exception const &exc);
};

// $insert namespace-close
}

#endif
